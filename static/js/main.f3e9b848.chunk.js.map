{"version":3,"sources":["images/logo.svg","components/SelectableButton.js","components/CustomPercentageInput.js","components/PercentageOptions.js","components/InputSection.js","components/OutputSection.js","App.js","index.js"],"names":["SelectableButton","value","isSelected","handleSelected","className","onClick","CustomPercentageInput","setSelectedPercentage","useState","userWillEnterCustomPercentage","setUserWillEnterCustomPercentage","autoFocus","onBlur","event","target","PercentageOptions","selectedPercentage","map","InputSection","billInput","setBillInput","numPeopleInput","setNumPeopleInput","htmlFor","id","onChange","OutputSection","tipDisplay","totalDisplay","handleReset","App","undefined","setTipDisplay","setTotalDisplay","useEffect","tipAmount","tipPerPerson","totalAmount","parseInt","totalPerPerson","isNaN","src","SplitterLogo","alt","toFixed","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3e9b848.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.3cc0528b.svg\";","import \"./SelectableButton.css\";\n\nfunction SelectableButton({ value, isSelected, handleSelected }) {\n  return (\n    <button\n      className={`option ${isSelected ? \"selected\" : \"\"}`}\n      onClick={() => handleSelected(value)}\n    >\n      {value}%\n    </button>\n  );\n}\n\nexport default SelectableButton;\n","import { useState } from \"react\";\n\nimport \"./CustomPercentageInput.css\";\n\nfunction CustomPercentageInput({ setSelectedPercentage }) {\n  const [userWillEnterCustomPercentage, setUserWillEnterCustomPercentage] =\n    useState(false);\n\n  const display = userWillEnterCustomPercentage ? (\n    <input\n      className=\"custom-percentage-input\"\n      autoFocus\n      onBlur={(event) => {\n        const { value } = event.target;\n        if (value === \"\") {\n          setUserWillEnterCustomPercentage(false);\n        } else {\n          setSelectedPercentage(value);\n        }\n      }}\n    />\n  ) : (\n    <button\n      className=\"custom-button\"\n      onClick={() => setUserWillEnterCustomPercentage(true)}\n    >\n      Custom\n    </button>\n  );\n\n  return display;\n}\n\nexport default CustomPercentageInput;\n","import { useState } from \"react\";\n\nimport \"./PercentageOptions.css\";\nimport SelectableButton from \"./SelectableButton\";\nimport CustomPercentageInput from \"./CustomPercentageInput\";\n\nfunction PercentageOptions({ selectedPercentage, setSelectedPercentage }) {\n  const [userWillEnterCustomPercentage, setUserWillEnterCustomPercentage] =\n    useState(false);\n\n  const percentageOptions = [5, 10, 15, 25, 50];\n\n  return (\n    <div>\n      {percentageOptions.map((value) => (\n        <SelectableButton\n          key={value}\n          value={value}\n          isSelected={selectedPercentage === value}\n          handleSelected={(value) => {\n            if (selectedPercentage !== value) {\n              setSelectedPercentage(value);\n            }\n          }}\n        />\n      ))}\n      <CustomPercentageInput\n        userWillEnterCustomPercentage={userWillEnterCustomPercentage}\n        setUserWillEnterCustomPercentage={setUserWillEnterCustomPercentage}\n        setSelectedPercentage={setSelectedPercentage}\n      />\n    </div>\n  );\n}\n\nexport default PercentageOptions;\n","import PercentageOptions from \"./PercentageOptions\";\nimport \"./InputSection.css\";\n\nfunction InputSection({\n  billInput,\n  setBillInput,\n  numPeopleInput,\n  setNumPeopleInput,\n  selectedPercentage,\n  setSelectedPercentage,\n}) {\n  return (\n    <div className=\"input-section\">\n      <label className=\"input-label\" htmlFor=\"billInput\">\n        Bill\n      </label>\n      <div className=\"bill-amount-text-input\">\n        <input\n          id=\"billInput\"\n          className=\"text-input\"\n          value={billInput}\n          onChange={(event) => setBillInput(event.target.value)}\n        />\n      </div>\n      <PercentageOptions\n        selectedPercentage={selectedPercentage}\n        setSelectedPercentage={(value) => setSelectedPercentage(value)}\n      />\n      <label className=\"input-label\" htmlFor=\"numPeopleInput\">\n        Number of People\n      </label>\n      <div className=\"num-people-text-input\">\n        <input\n          className=\"text-input\"\n          id=\"numPeopleInput\"\n          value={numPeopleInput}\n          onChange={(event) => setNumPeopleInput(event.target.value)}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default InputSection;\n","import \"./OutputSection.css\";\n\nfunction OutputSection({ tipDisplay, totalDisplay, handleReset }) {\n  return (\n    <div className=\"output-section\">\n      <div className=\"output-flex\">\n        <div>\n          <div className=\"output-title\">Tip Amount</div>\n          <div className=\"output-subtitle\">/ person</div>\n        </div>\n        <div className=\"output-value\">${tipDisplay}</div>\n      </div>\n\n      <div className=\"output-flex\">\n        <div>\n          <div className=\"output-title\">Total</div>\n          <div className=\"output-subtitle\">/ person</div>\n        </div>\n        <div className=\"output-value\">${totalDisplay}</div>\n      </div>\n\n      <button className=\"reset-button\" onClick={handleReset}>\n        Reset\n      </button>\n    </div>\n  );\n}\n\nexport default OutputSection;\n","import { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\nimport SplitterLogo from \"./images/logo.svg\";\nimport InputSection from \"./components/InputSection\";\nimport OutputSection from \"./components/OutputSection\";\n\nfunction App() {\n  const [billInput, setBillInput] = useState(\"\");\n  const [numPeopleInput, setNumPeopleInput] = useState(\"\");\n  const [selectedPercentage, setSelectedPercentage] = useState(undefined);\n  const [tipDisplay, setTipDisplay] = useState(0);\n  const [totalDisplay, setTotalDisplay] = useState(0);\n\n  useEffect(() => {\n    const tipAmount = (billInput * selectedPercentage) / 100;\n    const tipPerPerson = tipAmount / numPeopleInput;\n    const totalAmount = parseInt(billInput) + tipAmount;\n    const totalPerPerson = totalAmount / numPeopleInput;\n\n    if (!isNaN(tipPerPerson) && !isNaN(totalPerPerson)) {\n      setTipDisplay(tipAmount / numPeopleInput);\n      setTotalDisplay(totalAmount / numPeopleInput);\n    }\n  }, [billInput, numPeopleInput, selectedPercentage]);\n\n  const handleReset = () => {\n    console.log(\"reset called\");\n    setBillInput(\"\");\n    setNumPeopleInput(\"\");\n    setSelectedPercentage(undefined);\n    setTipDisplay(0);\n    setTotalDisplay(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <img src={SplitterLogo} alt=\"Splitter logo\" className=\"logo\" />\n      <div className=\"container\">\n        <InputSection\n          billInput={billInput}\n          setBillInput={setBillInput}\n          numPeopleInput={numPeopleInput}\n          setNumPeopleInput={setNumPeopleInput}\n          selectedPercentage={selectedPercentage}\n          setSelectedPercentage={setSelectedPercentage}\n        />\n        <OutputSection\n          tipDisplay={tipDisplay.toFixed(2)}\n          totalDisplay={totalDisplay.toFixed(2)}\n          handleReset={handleReset}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}